LocationViewer = function( loc, date, userStatus ) {
    var geocoder = new google.maps.Geocoder( );
    var _this = this;
    var attendanceManager = new AttendanceManager( );
    
    var LocationCommentList = $('ul.LocationCommentList');
    var LocationCommentSkeleton = LocationCommentList.find('li.LocationCommentSkeleton').removeClass('LocationCommentSkeleton').remove();
    var comments;
    var supportsHistAPI = (!!(window.history && window.history.replaceState));
 
    function init( ) {
	
	if ( userStatus ) {
	    $('div.AttendingButtons .Button[data-Status="' + userStatus + '"]').addClass('active');
	}
	
	var buttons = $('div.AttendingButtons .Button');
	buttons.hover(function(){$(this).addClass('hover');},function(){$(this).removeClass('hover');})
            .click(function(){
        	var oldStatus = $('div.AttendingButtons div.Button.active');
    	   	if( oldStatus.attr('data-status') === 'yes' ) {
    	   	    oldStatus.removeClass('active');
    	   	    attendanceManager.setAttendanceStatus(loc.id, date, 'no');
    	   	    $('.AttendeesYes').find('a[href="/profile/'+Viewer.userId+'"]').remove();
    	   	    var going = $('.AttendeesYes').find('.LocationAttendingCount');
    	   	    going.text(parseInt(likes.text())-1);
    	   	}
    	   	else {
    	   	    $(this).addClass('active');
    	   	    attendanceManager.setAttendanceStatus(loc.id, date, 'yes');
    	   	    var userlink = '<a href="/profile/'+Viewer.userId+'"><img src="/photo/'+Viewer.userId+'/Small" class="UserPhoto" /> </a>';
    	   	    $('.AttendeesYes').append(userlink);
    	   	    
    	   	    var going = $('.AttendeesYes').find('.LocationAttendingCount');
    	   	    going.text(parseInt(likes.text())+1);
    	   	}
            });
	
	$('#ShareEvent').bind('click', function(){
	    eventSharer.showFriendSelector();
	});
	
	if (loc.userLikes) {
	    $('.LocationLikeButton').addClass('active');
	}
	$('.LocationLikeButton').bind('click', function(){
    	    if($(this).hasClass('active')) {
    		$.ajax( {
  		    url: '/network/json/unlikelocation',
  		    type: 'GET',
  		    data: { locationId: loc.id },
  		    success: function( data ) {  },
  		    error: function(data) { console.log(data.e);}
  		} );
    		$('.LocationLikeCount').html(--loc.likes);
    		$(this).removeClass('active').text("like");
		$('.LocationLikeText').text("");
    	    }
    	    else {
    		$.ajax( {
		    url: '/network/json/likelocation',
		    type: 'GET',
		    data: { locationId: loc.id },
		    success: function( data ){  },
  		    error: function(data) { console.log(data.e); }
    		} );
		$('.LocationLikeCount').html(++loc.likes);
    		$(this).addClass('active').text("unlike");
		$('.LocationLikeText').text("You like this.");
    	    }
	});

	// limit length of comments
	$('textarea').keypress(function(e) {
            var tval = $('textarea').val(),
            tlength = tval.length,
            set = 100,
            remain = parseInt(set - tlength);
            if (remain <= 0 && e.which !== 0 && e.charCode !== 0) {
		$('textarea').val((tval).substring(0, tlength - 1))
            }
	})
	
	$('textarea').keydown(function(event) {
    	    if (event.which == 13) { // enter key pressed
    	  	event.preventDefault();
    	  	var comment = $(this).val();
    	  	if (comment == "") return;
    	  	var commentbox = $(this);
    		var locid = loc.id;
    		
    		_this.makeComment(locid, date, comment);
    		$(this).val('');
    		$(this).blur();
    	    }
    	});
	
	if(Viewer.userId != -1){
	    $('.Attendees').find('a').hover(hoverOverMember, hoverOutMember);
	}
	_this.drawMap( );
	_this.getComments();
	loadTopCommentForLocationAndDate();
	
    }
    
    this.getComments = function () {
	Main.fetchFromServer('/network/json/getcomments', {date: date, location: loc.id }, _this.receiveComments);
    }
    
    // TODO Consider not calling getComments every time a new comment or reply is added. instead, add it artificially onto the DOM
    
    this.makeComment = function (locId, date, comment) {
	Main.fetchFromServer('/network/json/makecomment', {location: loc.id, date: date, message: comment }, _this.getComments);
    }
    
    this.makeReply = function (commentId, replytext) {
	Main.fetchFromServer('/network/json/makereply', {commentId: commentId, message: replytext }, _this.getComments);
    }
    
    this.receiveComments = function (response) {
	LocationCommentList.empty();
	var lastComment;
	
	for ( var i = 0, len = response.comments.length; i < len; i++ ) {
	    //alert(JSON.stringify(response.comments[i], null, 4));
	    lastComment = _this.newComment(response.comments[i]); 
	}
	
	if (response.comments.length > 0)
    	    lastComment.addClass('last');
	
	$('.replybox').keypress(function(e) {
            var tval = $(this).val(),
            tlength = tval.length,
            set = 50,
            remain = parseInt(set - tlength);
            if (remain <= 0 && e.which !== 0 && e.charCode !== 0) {
		$(this).val((tval).substring(0, tlength - 1));
            }
	});
	$('.replybox').keydown(function(event) {
  	    if (event.which == 13) { // enter key pressed
  	  	event.preventDefault();
  	  	var reply = $(this).val();
  	  	if (reply == "") return;
  	  	var replybox = $(this);
  		var commentid = $(this).parent().attr("data-comment-id");
  		
  		_this.makeReply(commentid, reply);
  		$(this).val('');
  		$(this).blur();
  	    }
  	});
    }
    
    this.newComment = function (comment) {
	//console.log(comment);
	var newComment = LocationCommentSkeleton.clone(true);
	newComment.attr('data-comment-id', comment.id);
	newComment.find('span.UserName').text(comment.user.firstName);
	
	newComment.find('a.UserLink').attr('href', '/profile/' + comment.user.userId);
	newComment.find('img').attr('src','/photo/' + comment.user.userId + '/Medium');
	newComment.find('.Comment').html(comment.message);
	newComment.find('.Comment').linkify();
	newComment.find('.Comment').find('a').attr('target','_blank');
	newComment.find('.LikeCount').text(comment.likes.length);
	if ( $.inArray(Viewer.userId, comment.likes) != -1 ) {
    	    newComment.find('.heart').toggleClass('active');
	}
	
	if (Viewer.userId == comment.user.userId) {
    	    newComment.find('.NameLocationContainer').parent().append('<div class="DeleteComment">✖</div>');
    	    newComment.find('.DeleteComment').bind('click', function () {
    		$.ajax( {
    		    url: '/network/json/deletecomment',
    		    type: 'GET',
    		    data: { commentId: comment.id },
    		    success: function( data ){ newComment.remove(); },
    		    error: function(data) {console.log(data.e);}
    		} );
    	    });
	}
	if(Viewer.userId != -1){
	    newComment.find('.heart').bind('click', function(){
    		if($(this).hasClass('active')) {
    		    $.ajax( {
  			url: '/network/json/unlikecomment',
  			type: 'GET',
  			data: { commentId: comment.id },
  			success: function( data ){},
  			error: function(data) {console.log(data.e);}
  		    } );
    		    newComment.find('.LikeCount').text(--comment.likes.length);
    		    $(this).removeClass('active');
    		}
    		else {
    		    $.ajax( {
			url: '/network/json/likecomment',
			type: 'GET',
			data: { commentId: comment.id },
			success: function( data ){},
  			error: function(data){console.log(data.e);}
    		    } );
    		    newComment.find('.LikeCount').text(++comment.likes.length);
    		    $(this).toggleClass('active');
    		}
	    });
	}
	else {
	    newComment.find('.heart').css('cursor','default');
	}
	
	
	var d = new Date(0);
	d.setUTCSeconds(comment.posted_at);
	var months=new Array();
	months[0]="Jan"; months[1]="Feb"; months[2]="Mar";
	months[3]="Apr"; months[4]="May"; months[5]="Jun";
	months[6]="Jul"; months[7]="Aug"; months[8]="Sep";
	months[9]="Oct"; months[10]="Nov"; months[11]="Dec";
	var month = months[d.getMonth()];
	var day = d.getDate();
	var hour = d.getHours();
	var ampm = hour/12.0 >= 1 ? 'PM' : 'AM';
	var min = d.getMinutes();
	min = min < 10 ? '0' + min : min ;
	newComment.find('.Timestamp').text(month+' '+day+' '+hour%12+':'+min+ampm);
	
	if ( comment.user.College ) {
    	    newComment.find('span.UserCollege').text(comment.user.College);
	}
	var replyList = newComment.find('.Replies');
	
	for ( reply in comment.replies ) {
    	    var markup = '<div class="reply">'
    		+ comment.replies[reply].first_name + ': '+ comment.replies[reply].message + ' '
    		+ ((comment.replies[reply].user_id == Viewer.userId) ? '<span reply-id="'+comment.replies[reply].reply_id+'" class="DeleteReply">✖</span>'  : '')
    		+ '</div>';
    	    replyList.append(markup);
    	    
	}
	
	newComment.find('.DeleteReply').bind('click', function() {
    	    var replybox = $(this).parent();
    	    $.ajax( {
		url: '/network/json/deletereply',
		type: 'GET',
		data: { replyId: $(this).attr('reply-id') },
		success: function( data ){
		    replybox.remove();
		},
		error: function(data){console.log(data.e);}
  	    } );
	});
	newComment.appendTo(LocationCommentList);
	newComment.removeClass('hide');
	return newComment;
    }

    this.drawMap = function( ) {
	geocoder.geocode( { 'address': loc.streetAddress + ' ' + loc.cityName + ' ' + loc.stateName }, function( results, status ){
	    if ( status == google.maps.GeocoderStatus.OK ) {
		map.setCenter( results[0].geometry.location );
		var marker = new google.maps.Marker( {
		    map: map,
		    position: results[0].geometry.location
		} );
		
		var link = '<h2>'+loc.name+'<h2>';
		var infowindow = new google.maps.InfoWindow({
		    content: link,
		    maxWidth:100
		});
		google.maps.event.addListener(marker, 'click', function() {
		    infowindow.open(map , this);
		});
	    }
	} );
	
	var options = {
	    zoom: 18,
	    mapTypeId: google.maps.MapTypeId.ROADMAP,
	    streetViewControl: false,
	    mapTypeControl: false
	};
	var map = new google.maps.Map( document.getElementById("LocationMap"), options );
    };

    function loadTopCommentForLocationAndDate( ) {
        Main.fetchFromServer('/network/json/gettopcomments', {location: loc.id, date: date, limit: 1 }, receiveTopComment);
    }
    function receiveTopComment( response ) {
        if ( response.comments.length > 0 ) {
            var comment = newTopComment(response.comments[0]);
            comment.removeClass('hide');
            $('.LocationDetails').append(comment);
            comment.animate({
                bottom: '0'
            }, 500, function() {
                // Animation complete.
            });
        }
    }
    function newTopComment( comment ) {
	var markup = ''
	    +'<div class="hide TopCommentContainer">'
	    +  '<div class="Star"></div>'
	    +  '<a class="UserLink"><img class="UserPhoto" /></a>'
	    +  '<div class="NameLocationContainer">'
            +    '<a class="UserLink"><span class="UserName"></span></a><br />'
	    +    '<span class="UserCollege"></span>'
	    +  '</div>'
	    +  '<div class="Comment"></div>'
	    +'</div>';
        var newComment = $(markup);
        newComment.attr('data-comment-id', comment.id);
        newComment.find('span.UserName').text(comment.user.firstName);
	if ( comment.user.College ) {
    	    newComment.find('span.UserCollege').text(comment.user.College);
	}
	var ulink = newComment.find('a.UserLink');
        ulink.attr('href', '/profile/' + comment.user.userId);
	ulink.attr('data-user-id', comment.user.userId);

        newComment.find('img').attr('src','/photo/' + comment.user.userId + '/Small');
	var commentdiv = newComment.find('.Comment');
        commentdiv.html(comment.message);
        commentdiv.linkify();
        commentdiv.find('a').attr('target','_blank');
        return newComment;
    }
    
    function hoverOverMember( event ) {
	var container = $(this);
        var memberName = container.find('div.MemberName');
        if ( memberName.length ) {
            memberName.show( );
        }
        else {
            var nameDiv = $('<div class="MemberName"></div>');
            nameDiv.hide().addClass('mouseOver');
            container.append(nameDiv);

            Main.fetchFromServer('/user/' + $(this).attr('data-user-id'), { fields: 'firstName,lastName,College' },
                                 function( response ){
                                     nameDiv.html('<span class="UserName">'+response.firstName + '</span><br />' + '<span class="UserCollege">' + response.College+'</span>');
                                     $(document).mousemove( function(e) {
					 nameDiv.css({'top':e.pageY+20,'left':e.pageX-10});
				     });
				     nameDiv.css({'top':event.pageY+20,'left':event.pageX-10});
				     //nameDiv.css('left', -1 * ( nameDiv.outerWidth( ) - container.outerWidth( ) )/2 );
                                     if(nameDiv.hasClass('mouseOver')) {
                                         nameDiv.show();
                                     }
                                 } );
        }
    }
    
    function hoverOutMember( ) {
        $(this).find('div.MemberName').hide( ).removeClass('mouseOver');
    }
    
    
    init( );
}

$(function( ){
    var lv = new LocationViewer( loc, date, userStatus );
} );
